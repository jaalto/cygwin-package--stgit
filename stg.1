.\"     Title: stg
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.72.0 <http://docbook.sf.net/>
.\"      Date: 07/29/2007
.\"    Manual: 
.\"    Source: 
.\"
.TH "STG" "1" "07/29/2007" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
stg \- manage stacks of patches using the GIT content tracker
.SH "SYNOPSIS"
.sp
.RS 4
.nf
\fIstg\fR [\-\-version | \-\-help]
\fIstg\fR [\-\-help <command> | <command> \-\-help]
\fIstg\fR <command> [COMMAND OPTIONS] [ARGS]
.fi
.RE
.SH "DESCRIPTION"
StGIT (Stacked GIT) is an application providing similar functionality to Quilt (i.e. pushing/popping patches to/from a stack), on top of GIT. These operations are performed using GIT commands and the patches are stored as GIT commit objects, allowing easy merging of the StGIT patches into other repositories using standard GIT functionality.

An StGIT stack is a GIT branch with additional information to help making changes to individual patches you already committed, rather than making changes by adding new commits. It is thus a non\-forwarding, or rewinding branch: the old head of the branch is often not reachable as one of the new head's ancestors.

Typical uses of StGIT include:
.PP
Tracking branch
.RS 4
Tracking changes from a remote branch, while maintaining local modifications against that branch, possibly with the intent of sending some patches upstream. StGIT assists in preparing and cleaning up patches until they are acceptable upstream, as well as maintaining local patches not meant to be sent upstream.

In such a setup, typically all commits on your branch are StGIT patches; the stack base is the branch point where your changes "fork" off their parent branch.
.RE
.PP
Development branch
.RS 4
Preparing and testing your commits before publishing them, separating your features from unrelated bugfixes collected while developping.

In such a setup, not all commits on your branch need to be StGIT patches; there may be regular GIT commits below your stack base.
.RE
.SS "Patches"
Many StGIT commands take references to StGIT patches as arguments. Patches in the stack are identified with short names, each of which must be unique in the stack.

Patches in the current stack are just referred to by their name. Some commands allow you to specify a patch in another stack of the repository; this is done by suffixing the patch name with an \fI@\fR sign followed by the branch name (eg. \fIthispatch@otherbranch\fR).

A number of positions in the stack related to the patch are also accessible through \fI//\fR suffixes. For example, \fIpatch//top\fR is equivalent to \fIpatch\fR, and \fIpatch//bottom\fR refers to the commit below \fIpatch\fR (i.e. the patch below, or the stack base if this is the bottom\-most patch). Similarly \fI//top.old\fR and \fI//bottom.old\fR refer to the previous version of the patch (before the last \fBstg push\fR(1) or \fBstg refresh\fR(1) operation). When referring to the current patch, its name can be omitted (eg. \fIcurrentpatch//bottom.old\fR can be abbreviated as \fIbottom.old\fR).

If you need to pass a given StGIT reference to a git command, \fBstg id\fR(1) will convert it to a git commit id.
.SH "OPTIONS"
The following generic option flags are available. Additional options are available per\-command, and documented in the command\-specific documentation.
.PP
\-\-version
.RS 4
Prints the StGIT suite version that the \fIstg\fR program came from, as well as version of other components used, such as GIT and Python.
.RE
.PP
\-\-help
.RS 4
Prints the synopsis and a list of all commands. If a git command is given this option will display the specific help for that command.
.RE
.SH "STGIT COMMANDS"
We divide StGIT commands in thematic groups, according to the primary type of object they create or change.

Here is a short description of each command. A more detailed description is available in individual command manpages. Those manpages are named \fIstg\-<command>(1)\fR.
.SS "Generic commands"
User\-support commands not touching the repository.
.PP
stg help
.RS 4
print the detailed command usage
.RE
.PP
stg version
.RS 4
display version information
.RE
.PP
stg copyright
.RS 4
display copyright information
.RE
.SS "Repository commands"
.PP
\fBstg clone\fR(1)
.RS 4
make a local clone of a remote repository
.RE
.PP
\fBstg id\fR(1)
.RS 4
print the GIT hash value of a StGIT reference
.RE
.SS "Stack commands"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBStack management\fR
.RS
.PP
\fBstg branch\fR(1)
.RS 4
manage patch stacks
.RE
.PP
\fBstg init\fR(1)
.RS 4
initialise the current branch for use with StGIT
.RE
.PP
\fBstg clean\fR(1)
.RS 4
delete the empty patches in the series
.RE
.PP
\fBstg pull\fR(1)
.RS 4
pull the changes from the remote repository
.RE
.PP
\fBstg rebase\fR(1)
.RS 4
move the stack base to another point in history
.RE
.PP
\fBstg commit\fR(1)
.RS 4
permanently store the applied patches into stack base
.RE
.PP
\fBstg uncommit\fR(1)
.RS 4
turn regular GIT commits into StGIT patches
.RE
.PP
\fBstg assimilate\fR(1)
.RS 4
StGIT\-ify any GIT commits made on top of your StGIT stack
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBControlling what patches are applied\fR
.RS
.PP
\fBstg series\fR(1)
.RS 4
print the patch series
.RE
.PP
\fBstg push\fR(1)
.RS 4
push patches to the top, even if applied push or pop patches to the given one push one or more patches onto of the stack
.RE
.PP
\fBstg pop\fR(1)
.RS 4
pop one or more patches from the stack
.RE
.PP
\fBstg goto\fR(1)
.RS 4
push or pop patches to the given one
.RE
.PP
\fBstg float\fR(1)
.RS 4
push patches to the top, even if applied
.RE
.PP
\fBstg sink\fR(1)
.RS 4
send patches deeper down the stack
.RE
.PP
\fBstg applied\fR(1)
.RS 4
print the applied patches
.RE
.PP
\fBstg unapplied\fR(1)
.RS 4
print the unapplied patches
.RE
.PP
\fBstg top\fR(1)
.RS 4
print the name of the top patch
.RE
.PP
\fBstg hide\fR(1)
.RS 4
hide a patch in the series
.RE
.PP
\fBstg unhide\fR(1)
.RS 4
unhide a hidden patch in the series
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBMiscellaneous stack commands\fR
.RS
.PP
\fBstg patches\fR(1)
.RS 4
show the applied patches modifying a file
.RE
.RE
.SS "Patch commands"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBPatch management\fR
.RS
.PP
\fBstg new\fR(1)
.RS 4
create a new patch and make it the topmost one
.RE
.PP
\fBstg delete\fR(1)
.RS 4
delete the empty patches in the series delete patches
.RE
.PP
\fBstg rename\fR(1)
.RS 4
rename a patch in the series
.RE
.PP
\fBstg log\fR(1)
.RS 4
display the patch changelog
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBControlling patch contents\fR
.RS
.PP
\fBstg files\fR(1)
.RS 4
show the files modified by a patch (or the current patch)
.RE
.PP
\fBstg show\fR(1)
.RS 4
show the applied patches modifying a file show the files modified by a patch (or the current patch) show the commit corresponding to a patch (or the current patch) show the tree diff show the tree status
.RE
.PP
\fBstg refresh\fR(1)
.RS 4
generate a new commit for the current patch
.RE
.PP
\fBstg fold\fR(1)
.RS 4
integrate a GNU diff patch into the current patch
.RE
.PP
\fBstg pick\fR(1)
.RS 4
import a patch from a different branch or a commit object
.RE
.PP
\fBstg sync\fR(1)
.RS 4
synchronise patches with a branch or a series
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBInteraction with the rest of the world\fR
.RS
.PP
\fBstg export\fR(1)
.RS 4
exports patches to a directory
.RE
.PP
\fBstg import\fR(1)
.RS 4
import a GNU diff file as a new patch import a patch from a different branch or a commit object
.RE
.PP
\fBstg mail\fR(1)
.RS 4
send a patch or series of patches by e\-mail
.RE
.RE
.SS "Working\-copy commands"
.PP
\fBstg add\fR(1)
.RS 4
add files or directories to the repository
.RE
.PP
\fBstg rm\fR(1)
.RS 4
remove files from the repository
.RE
.PP
\fBstg cp\fR(1)
.RS 4
copy files inside the repository
.RE
.PP
\fBstg status\fR(1)
.RS 4
show the tree status
.RE
.PP
\fBstg diff\fR(1)
.RS 4
show the tree diff
.RE
.PP
\fBstg resolved\fR(1)
.RS 4
mark a file conflict as solved
.RE
.SH "CONFIGURATION MECHANISM"
Starting with 0.12, StGIT uses the same configuration mechanism as GIT. See \fBgit\fR(7) for more details.
.SH "TEMPLATES"
A number of StGIT commands make use of template files to provide useful default texts to be edited by the user. These \fI<name>.tmpl\fR template files are searched in the following directories:

.sp
.RS 4
.nf
$GITDIR/
$HOME/.stgit/templates/
/usr/share/stgit/templates/
.fi
.RE
